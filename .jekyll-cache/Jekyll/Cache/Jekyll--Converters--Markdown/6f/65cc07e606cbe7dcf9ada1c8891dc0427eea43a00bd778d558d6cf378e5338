I"»<h1 class="no_toc" id="apis-and-sdks">APIs and SDKs</h1>
<details>
  <summary class="text-delta">
    Table of contents
  </summary>
<ul id="markdown-toc">
  <li><a href="#best-practices" id="markdown-toc-best-practices">Best practices</a>    <ul>
      <li><a href="#be-descriptive-and-thorough" id="markdown-toc-be-descriptive-and-thorough">Be descriptive and thorough<br /></a></li>
      <li><a href="#describe-almost-everything" id="markdown-toc-describe-almost-everything">Describe (almost) everything<br /></a></li>
      <li><a href="#code-elements-as-plural-nouns" id="markdown-toc-code-elements-as-plural-nouns">Code elements as plural nouns<br /></a></li>
      <li><a href="#code-elements-as-verbs" id="markdown-toc-code-elements-as-verbs">Code elements as verbs<br /></a></li>
    </ul>
  </li>
  <li><a href="#classes" id="markdown-toc-classes">Classes</a>    <ul>
      <li><a href="#introduce-classes" id="markdown-toc-introduce-classes">Introduce classesâ€¦<br /></a></li>
      <li><a href="#then-add-the-rest" id="markdown-toc-then-add-the-rest">â€¦Then add the rest</a></li>
    </ul>
  </li>
  <li><a href="#constants-and-fields" id="markdown-toc-constants-and-fields">Constants and fields</a>    <ul>
      <li><a href="#describe-and-link" id="markdown-toc-describe-and-link">Describe and link<br /></a></li>
    </ul>
  </li>
  <li><a href="#methods" id="markdown-toc-methods">Methods</a>    <ul>
      <li><a href="#introduce-methods" id="markdown-toc-introduce-methods">Introduce methodsâ€¦<br /></a></li>
      <li><a href="#then-add-the-rest-1" id="markdown-toc-then-add-the-rest-1">â€¦Then add the rest</a></li>
      <li><a href="#use-present-tense" id="markdown-toc-use-present-tense">Use present tense<br /></a></li>
    </ul>
  </li>
  <li><a href="#text-formatting" id="markdown-toc-text-formatting">Text formatting</a>    <ul>
      <li><a href="#code-font" id="markdown-toc-code-font">Code font<br /></a></li>
      <li><a href="#italics" id="markdown-toc-italics">Italics<br /></a></li>
    </ul>
  </li>
</ul>

</details>

<p>Guidelines for documenting APIs and SDKs.</p>

<h2 id="best-practices">Best practices</h2>

<h3 id="be-descriptive-and-thorough">Be descriptive and thorough<br /></h3>
<p>Make sure your documentation is a comprehensive reference that includes every piece of information your reader needs to know. Donâ€™t assume that your reader knows the usage, definition, or implementation of any part of your API or SDK!</p>

<h3 id="describe-almost-everything">Describe (almost) everything<br /></h3>
<p>Include a description for almost every aspect of your API or SDK, including (but not limited to) every class, constant, field, and method.<br /></p>

<p>Methods in particular should include a description of each parameter, return value, and possible exceptions thrown.</p>

<h3 id="code-elements-as-plural-nouns">Code elements as plural nouns<br /></h3>
<p>Donâ€™t use elements of your code (like the names of classes or parameters) as plural nouns.</p>

<ul>
  <li>
    <p><strong>No:</strong> Use <code class="language-plaintext highlighter-rouge">coolBlock</code>s to store data.</p>
  </li>
  <li>
    <p><strong>Yes:</strong> Use <code class="language-plaintext highlighter-rouge">coolBlock</code> objects to store data.</p>
  </li>
</ul>

<h3 id="code-elements-as-verbs">Code elements as verbs<br /></h3>
<p>Donâ€™t use elements of your code (like the names of methods) as verbs.</p>

<ul>
  <li>
    <p><strong>No:</strong> <code class="language-plaintext highlighter-rouge">end()</code> the program.</p>
  </li>
  <li>
    <p><strong>Yes:</strong> Call <code class="language-plaintext highlighter-rouge">end()</code> to terminate the program.</p>
  </li>
</ul>

<h2 id="classes">Classes</h2>

<h3 id="introduce-classes">Introduce classesâ€¦<br /></h3>
<p>The first sentence of every class description should explain the purpose of that class.<br /></p>

<p>However, donâ€™t just restate the name of the classâ€”in fact, try to avoid using the name of the class in the first sentence of your description.<br /></p>

<p>Additionally, donâ€™t start your description with phrases like <em>This classâ€¦</em>; instead, just start explaining what the class is for. This means your first sentence may technically be a sentence fragment (and thatâ€™s okay).</p>

<ul>
  <li><strong>Example:</strong><br />
<code class="language-plaintext highlighter-rouge">Dog</code><br />
An animal that can sit, fetch, roll over, and play dead.</li>
</ul>

<h3 id="then-add-the-rest">â€¦Then add the rest</h3>
<p>The rest of your description (after that first sentence) should include additional information about how and when to use the class, recommended uses, warnings, and so on.</p>

<h2 id="constants-and-fields">Constants and fields</h2>

<h3 id="describe-and-link">Describe and link<br /></h3>
<p>For each constant or field, write a brief description that links back to any relevant methods.</p>

<h2 id="methods">Methods</h2>

<h3 id="introduce-methods">Introduce methodsâ€¦<br /></h3>
<p>The first sentence of every method description should explain what the method does or the action it performs.<br /></p>

<p>However, donâ€™t just restate the name of the methodâ€”try to avoid using the name of the method in the first sentence of your description.<br /></p>

<p>Additionally, donâ€™t start your description with phrases like <em>This methodâ€¦</em>; instead, just start explaining what the method does. This means your first sentence may technically be a sentence fragment (and thatâ€™s okay).</p>

<ul>
  <li><strong>Example:</strong><br />
<code class="language-plaintext highlighter-rouge">feedDog( Dog dog_name )</code><br />
Sends three scoops of kibble to the <code class="language-plaintext highlighter-rouge">Dog</code> of your choice. Replace <em>dog_name</em> with the name of your active <code class="language-plaintext highlighter-rouge">Dog</code> object.</li>
</ul>

<h3 id="then-add-the-rest-1">â€¦Then add the rest</h3>
<p>The rest of your description (after that first sentence) should include additional information about how and when to use the method, requirements and prerequisites, exceptions that may occur, and so on.</p>

<h3 id="use-present-tense">Use present tense<br /></h3>
<p>Use present tense for method descriptions. For example, you might say that a method  <em>fetches</em> data; donâ€™t say that it <em>fetched</em> or <em>will fetch</em> data.</p>

<h2 id="text-formatting">Text formatting</h2>

<h3 id="code-font">Code font<br /></h3>
<p>Use <code class="language-plaintext highlighter-rouge">code</code> font for the names of classes, objects, methods, and so on; however, donâ€™t use <code class="language-plaintext highlighter-rouge">code</code> font for the actual words <em>class</em>, <em>object</em>, or <em>method</em>.</p>

<ul>
  <li>The <code class="language-plaintext highlighter-rouge">throwBall()</code> method should only be used outdoors.</li>
</ul>

<p>Use <code class="language-plaintext highlighter-rouge">code</code> font for string literals, but enclose the string in double quotation marks.</p>

<ul>
  <li><strong>Examples:</strong> <code class="language-plaintext highlighter-rouge">"false"</code>, <code class="language-plaintext highlighter-rouge">"Genius of Love"</code></li>
</ul>

<h3 id="italics">Italics<br /></h3>
<p>Use italics for the names of parameters.</p>

<ul>
  <li><strong>Example:</strong> The <code class="language-plaintext highlighter-rouge">sendBirthdayCard( int Age, String Recipient )</code> method accepts the parameters <em>Age</em> and <em>Recipient</em>.</li>
</ul>

:ET